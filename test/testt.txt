void execute_mul_cmds(data_t *data, char *cmds)
{
	char *saveptr;
	char *curr_cmd = strtok_r(cmds, ";", &saveptr);
	char *cmd_cpy;

	while (curr_cmd)
	{
		cmd_cpy = _strdup(curr_cmd);

		data->cmd = _strdup(cmd_cpy);
		_tokenize_command(data);

		if (data->argv != NULL && data->argv[0] != NULL)
		{
			execute_cmd(data);
		}

		free(cmd_cpy);
		clean(data);
		curr_cmd = strtok_r(NULL, ";", &saveptr);
	}

	free(cmd_cpy);
}


void execute_mul_cmds(data_t *data, char *cmds)
{
	char *saveptr;
	char *curr_cmd = strtok_r(cmds, ";", &saveptr);

	while (curr_cmd)
	{
		_print(curr_cmd, STDOUT_FILENO);
		_print("\n", STDOUT_FILENO);
		data->cmd = curr_cmd;

		_tokenize_command(data);

		if (data->argv != NULL && data->argv[0] != NULL)
		{
			execute_cmd(data);
		}

		curr_cmd = strtok_r(NULL, ";", &saveptr);
	}
}


Code duplication: The code to get the next token from the command string is duplicated. You could avoid this by using a do-while loop.






int _tokenize_command(data_t *data)
{
	char *cmd_cpy;
	char *delim = " \n";
	char *token;
	int i = 0;

	data->cmd[strcspn(data->cmd, "\n")] = '\0';
	cmd_cpy = _strdup(data->cmd);
	token = _div_str(cmd_cpy, delim);

	if (cmd_cpy == NULL)
	{
		perror("_strdup failed");
		exit(EXIT_FAILURE);
	}

	data->argc = 0;

	while (token)
	{
		(data->argc)++;
		token = _div_str(NULL, delim);
	}

	free(cmd_cpy);

	data->argv = malloc(((data->argc) + 1) * sizeof(char *));
	if (data->argv == NULL)
	{
		perror("malloc failed");
		return (-1);
	}

	token = _div_str(data->cmd, delim);

	while (token)
	{
		data->argv[i] = _strdup(token);
		if (data->argv[i] == NULL)
		{
			perror("_strdup failed");
			_free_argv(data);
			return (-1);
		}
		i++;
		token = _div_str(NULL, delim);
	}

	data->argv[i] = NULL;

	return (0);
}


		_free_argv(data);
		_free_cmds(data);
		free(data->cmd);
